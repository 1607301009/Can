C51 COMPILER V9.60.0.0   MAIN                                                              08/24/2021 00:12:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <reg52.h>
   2          #include "MCP2515.H"
   3          
   4          bit CAN_MERRF_Flag = 0;                            //CAN报文错误中断标志位
   5          bit CAN_WAKIF_Flag = 0;                            //CAN唤醒中断标志位
   6          bit CAN_ERRIF_Flag = 0;                            //CAN错误中断标志位（EFLG 寄存器中有多个中断源）
   7          bit CAN_TX2IF_Flag = 0;                            //MCP2515发送缓冲器2 空中断标志位
   8          bit CAN_TX1IF_Flag = 0;                            //MCP2515发送缓冲器1 空中断标志位
   9          bit CAN_TX0IF_Flag = 0;                            //MCP2515发送缓冲器0 空中断标志位
  10          bit CAN_RX1IF_Flag = 0;                            //MCP2515接收缓冲器1 满中断标志位
  11          bit CAN_RX0IF_Flag = 0;                            //MCP2515接收缓冲器0 满中断标志位
  12          
  13          unsigned char CAN_R_Buffer[8];                        //CAN接收数据保存缓冲区
  14          
  15          //MCP2515波特率预分频 要考虑FOSC=8M BRP=0..64 PHSEG1=3..16 PGSEG2=2..8 SJW=1..4
  16          #define    CAN_5Kbps    0x31    //TQ=12500 sample-point=0.875 PRSEG_6TQ PHSEG1_7TQ PHSEG2_2TQ SJW_1TQ
  17          #define    CAN_10Kbps    0x13    //TQ=6250 sample-point=0.875 PRSEG_6TQ PHSEG1_7TQ PHSEG2_2TQ SJW_1TQ
  18          #define CAN_25Kbps    0x09    //TQ=2500 sample-point=0.875 PRSEG_6TQ PHSEG1_7TQ PHSEG2_2TQ SJW_1TQ
  19          #define CAN_50Kbps    0x04    //TQ=1250 sample-point=0.875 PRSEG_6TQ PHSEG1_7TQ PHSEG2_2TQ SJW_1TQ
  20          #define CAN_100Kbps    0x01    //TQ=500 sample-point=0.850 PRSEG_8TQ PHSEG1_8TQ PHSEG2_3TQ SJW_1TQ
  21          #define CAN_125Kbps    0x01    //TQ=500 sample-point=0.875 PRSEG_6TQ PHSEG1_7TQ PHSEG2_2TQ SJW_1TQ
  22          #define CAN_250Kbps    0x00    //TQ=250 sample-point=0.875 PRSEG_6TQ PHSEG1_7TQ PHSEG2_2TQ SJW_1TQ
  23          #define    CAN_500Kbps    0x00    //TQ=250 sample-point=0.750 PRSEG_2TQ PHSEG1_3TQ PHSEG2_2TQ SJW_1TQ
  24          
  25          //MCP2515波特率 要考虑FOSC=8M BRP=0..64 PRSEG=1..8 PHSEG1=3..16 PHSEG2=2..8 SJW=1..4 
  26          unsigned char code
  27          bitrate_5Kbps[]={
  28          CAN_5Kbps,PRSEG_6TQ,PHSEG1_7TQ,PHSEG2_2TQ,SJW_1TQ};
  29          unsigned char code
  30          bitrate_10Kbps[]={
  31          CAN_10Kbps,PRSEG_6TQ,PHSEG1_7TQ,PHSEG2_2TQ,SJW_1TQ};
  32          unsigned char code
  33          bitrate_25Kbps[]={
  34          CAN_25Kbps,PRSEG_6TQ,PHSEG1_7TQ,PHSEG2_2TQ,SJW_1TQ};
  35          unsigned char code
  36          bitrate_50Kbps[]={
  37          CAN_50Kbps,PRSEG_6TQ,PHSEG1_7TQ,PHSEG2_2TQ,SJW_1TQ};
  38          unsigned char code
  39          bitrate_100Kbps[]={
  40          CAN_100Kbps,PRSEG_8TQ,PHSEG1_8TQ,PHSEG2_3TQ,SJW_1TQ};
  41          unsigned char code
  42          bitrate_125Kbps[]={
  43          CAN_125Kbps,PRSEG_6TQ,PHSEG1_7TQ,PHSEG2_2TQ,SJW_1TQ};
  44          unsigned char code
  45          bitrate_250Kbps[]={
  46          CAN_250Kbps,PRSEG_6TQ,PHSEG1_7TQ,PHSEG2_2TQ,SJW_1TQ};
  47          unsigned char code
  48          bitrate_500Kbps[]={
  49          CAN_500Kbps,PRSEG_2TQ,PHSEG1_3TQ,PHSEG2_2TQ,SJW_1TQ};
  50          
  51          /*******************************************************************************
  52          * 函数名  : Exint_Init
  53          * 描述    : 外部中断1初始化函数
  54          * 输入    : 无
  55          * 输出    : 无
C51 COMPILER V9.60.0.0   MAIN                                                              08/24/2021 00:12:12 PAGE 2   

  56          * 返回值  : 无
  57          * 说明    : 无
  58          *******************************************************************************/
  59          void Exint_Init(void) {
  60   1          PX1 = 1;        //设置外部中断1的中断优先级为高优先级
  61   1          IT1 = 1;    //设置INT1的中断类型 (1:仅下降沿 0:上升沿和下降沿)
  62   1          EX1 = 1;    //使能INT1中断
  63   1          EA = 1;    //使能总中断
  64   1      }
  65          
  66          /*******************************************************************************
  67          * 函数名  : Exint_ISR
  68          * 描述    : 外部中断1中断服务函数 单片机引脚P3.3接MCP2515 INT引脚
  69          * 输入    : 无
  70          * 输出    : 无
  71          * 返回值  : 无
  72          * 说明    : 用于检测MCP2515中断引脚的中断信号
  73          *******************************************************************************/
  74          sbit P1_0 = P1 ^0;
  75          
  76          void Exint_ISR(void)
  77          
  78          interrupt 2 using 1
  79          {
  80   1      unsigned char Flag;                                //CAN接收到数据标志
  81   1      Flag = MCP2515_ReadByte(CANINTF);
  82   1      //P1_0=!P1_0;
  83   1      
  84   1      if (Flag&0x80)
  85   1      CAN_MERRF_Flag = 1;                            //CAN报文错误中断标志位
  86   1      if (Flag&0x40)
  87   1      CAN_WAKIF_Flag = 1;                            //CAN唤醒中断标志位
  88   1      if (Flag&0x20)
  89   1      CAN_ERRIF_Flag = 1;                            //CAN错误中断标志位（EFLG 寄存器中有多个中断源）
  90   1      if (Flag&0x10)
  91   1      CAN_TX2IF_Flag = 1;                            //MCP2515发送缓冲器2 空中断标志位
  92   1      if (Flag&0x08)
  93   1      CAN_TX1IF_Flag = 1;                            //MCP2515发送缓冲器1 空中断标志位
  94   1      if (Flag&0x04)
  95   1      CAN_TX0IF_Flag = 1;                            //MCP2515发送缓冲器0 空中断标志位
  96   1      if (Flag&0x02)
  97   1      //P1_0=!P1_0;
  98   1      CAN_RX1IF_Flag = 1;                            //MCP2515接收缓冲器1 满中断标志位
  99   1      if (Flag&0x01)
 100   1      P1_0 = !P1_0;
 101   1      CAN_RX0IF_Flag = 1;                            //MCP2515接收缓冲器0 满中断标志位
 102   1      }
 103          
 104          /* 将一段内存数据转换为十六进制字符串，参数 str 是字符串指针，参数 src 是源数据地址，参数 len 是数据长度 *
             -/
 105          void *MemToStr(unsigned char *str, unsigned char *src, unsigned char len) {
 106   1          unsigned char tmp;
 107   1      
 108   1          while (len--) {
 109   2              tmp = *src >> 4;           // 取出高 4 位
 110   2              if (tmp <= 9)              // 转换为 0-9 或 A-F
 111   2                  *str++ = tmp + '0';
 112   2              else
 113   2                  *str++ = tmp - 10 + 'A';
 114   2      
 115   2              tmp = *src & 0x0F;         // 取出低 4 位
 116   2              if (tmp <= 9)              // 转换为 0-9 或 A-F
C51 COMPILER V9.60.0.0   MAIN                                                              08/24/2021 00:12:12 PAGE 3   

 117   2                  *str++ = tmp + '0';
 118   2              else
 119   2                  *str++ = tmp - 10 + 'A';
 120   2      
 121   2              *str++ = ' ';              // 转换完 1 个字节就添加 1 个空格
 122   2              src++;
 123   2          }
 124   1          *str = '\0';                // 添加字符串结束符
 125   1      }
*** WARNING C173 IN LINE 125 OF main.c: missing return-expression
 126          
 127          
 128          unsigned char NoteSend[] = "Send:";
 129          unsigned char NoteReceive[] = "Receive:";
 130          unsigned char NoteID[] = " ID:";
 131          unsigned char NoteData[] = " Data:";
 132          unsigned char Enter[] = "\r\n";
 133          
 134          void Send(unsigned int ID, unsigned char EXIDE, unsigned char DLC, unsigned char *Send_data) {
 135   1      
 136   1      //    UART_send_buffer(Enter, sizeof(Enter));
 137   1      //
 138   1      //    UART_send_buffer(NoteSend, sizeof(NoteSend));
 139   1      //    UART_send_buffer(NoteID, sizeof(NoteID));
 140   1      //    UART_send_str("F");
 141   1      //    UART_send_buffer(Enter, sizeof(Enter));
 142   1      //
 143   1      //    UART_send_buffer(NoteSend, strlen(NoteSend));
 144   1      //    UART_send_buffer(NoteData, sizeof(NoteData));
 145   1          unsigned char str[5];
 146   1          UART_send_buffer(str, 23);
 147   1          UART_send_buffer(Enter, sizeof(Enter));
 148   1          Delay_Nms(1000);
 149   1      //    UART_send_buffer(SendIDNote, sizeof(SendIDNote)); //发送一个字符
 150   1      
 151   1          //UART_send_buffer(ID, sizeof(ID)); //发送一个字符
 152   1          CAN_Send_buffer(ID, EXIDE, DLC, Send_data);
 153   1      //    SendIDNote = NumAddStr(*SendIDNote, ID)
 154   1      //    UART_send_buffer(SendIDNote, sizeof(SendIDNote)); //发送一个字符
 155   1      }
 156          
 157          /*******************************************************************************
 158          * 函数名  : main
 159          * 描述    : 主函数，用户程序从main函数开始运行
 160          * 输入    : 无
 161          * 输出    : 无
 162          * 返回值  : 无
 163          * 说明    : 无
 164          *******************************************************************************/
 165          //unsigned char TXB_Value[]={0x0,0x1,0x2,0x3,0x04,0x05,0x06,0x27,0x08,0x09,0x10,0x11,0x12,0x13};
 166          unsigned char RXB_Value[] = {0x0, 0x1, 0x2, 0x3, 0x04, 0x05, 0x06, 0x27};
 167          
 168          unsigned char Read_Value[] = {0x0, 0x1, 0x2, 0x3, 0x04, 0x05, 0x06, 0x27};
 169          
 170          //unsigned char ini00[]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0,0x00,0x00,0x00,0x00,0x00,0x00};
 171          
 172          void main(void) {
 173   1          unsigned int j;
 174   1      //
 175   1          unsigned long int ID = 0x7FD;
 176   1          unsigned char EXIDE = 0;
 177   1      //  unsigned char DLC=8;
C51 COMPILER V9.60.0.0   MAIN                                                              08/24/2021 00:12:12 PAGE 4   

 178   1          unsigned char Send_data[] = {0x20, 0xF1, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
 179   1      //    unsigned char zifuchuan1[] = " aaaB22ss21d";
 180   1      
 181   1          //unsigned char rd[] = "\\r\\d";
 182   1          UART_init();    //UART1初始化配置
 183   1          Exint_Init();            //外部中断1初始化函数
 184   1      
 185   1      
 186   1          MCP2515_Init(bitrate_100Kbps);
 187   1      
 188   1          for (j = 0; j < 2; j++) //发送字符串，直到遇到0才结束
 189   1          {
 190   2      //        UART_send_buffer(SendIDNote, sizeof(SendIDNote)); //发送一个字符
 191   2              //UART_send_buffer(rd, sizeof(rd)); //发送一个字符
 192   2              Send(ID, EXIDE, sizeof(Send_data), Send_data);
 193   2      //        CAN_Send_buffer(ID,EXIDE,DLC,Send_data);
 194   2              ID++;
 195   2              EXIDE = !EXIDE;
 196   2      //        DLC--;
 197   2              Delay_Nms(1000);
 198   2      
 199   2      //        CAN_Receive_Buffer(TXB0CTRL, Read_Value);
 200   2      //        UART_send_buffer(Read_Value,14); //发送一个字符
 201   2      
 202   2      //        Delay_Nms(1000);  //移动到下一个字符
 203   2          }
 204   1      
 205   1          Delay_Nms(2000);
 206   1      //  ini00[0]=CAN_Flag;
 207   1      //  ini00[1]=P3;
 208   1          while (1) {
 209   2      
 210   2              if (CAN_RX0IF_Flag == 1)                            //接收缓冲器0 满中断标志位
 211   2              {
 212   3                  CAN_RX0IF_Flag = 0;//CAN接收到数据标志
 213   3                  if (MCP2515_ReadByte(MCP2515_ReadByte) & 0x05)//RXB0滚存到了RXB1
 214   3                      CAN_Receive_Buffer(RXB1CTRL, RXB_Value);//CAN接收一帧数据
 215   3                  else
 216   3                      CAN_Receive_Buffer(RXB0CTRL, RXB_Value);//CAN接收一帧数据
 217   3                  UART_send_buffer(RXB_Value, 14); //发送一个字符
 218   3                  Delay_Nms(2000);  //移动到下一个字符
 219   3      //      UART_send_buffer(RXB_Value,14); //发送一个字符
 220   3      
 221   3      //      CAN_Receive_Buffer(RXB1CTRL,RXB_Value);//CAN接收一帧数据
 222   3      //      UART_send_buffer(RXB_Value,14); //发送一个字符
 223   3      //      Delay_Nms(2000);  //移动到下一个字符
 224   3      //      UART_send_buffer(RXB_Value,14); //发送一个字符
 225   3              }
 226   2              if (CAN_RX1IF_Flag == 1)                            //接收缓冲器1 满中断标志位
 227   2              {
 228   3                  CAN_RX1IF_Flag = 0;//CAN接收到数据标志
 229   3                  CAN_Receive_Buffer(RXB1CTRL, RXB_Value);//CAN接收一帧数据
 230   3                  UART_send_buffer(RXB_Value, 14); //发送一个字符
 231   3                  Delay_Nms(2000);  //移动到下一个字符
 232   3      //      UART_send_buffer(RXB_Value,14); //发送一个字符
 233   3              }
 234   2      
 235   2              Delay_Nms(2000);
 236   2          }
 237   1      
 238   1      }
*** WARNING C290 IN LINE 125 OF main.c: missing return value
C51 COMPILER V9.60.0.0   MAIN                                                              08/24/2021 00:12:12 PAGE 5   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    565    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
